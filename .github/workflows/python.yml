name: release

on:
  release:
    types: [created]
  pull_request:
    branches: [ master ]
    paths:
      - 'bindings/python/**'
      - 'src/**'
      - 'build.zig'
      - 'build.zig.zon'
      - '.github/workflows/python.yml'
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Zig
      uses: mlugg/setup-zig@v2
      with:
        version: master

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Create virtual environment
      run: |
        uv venv

    - name: Install build dependencies
      run: |
        uv pip install --upgrade setuptools wheel build pytest
        # Install numpy for more comprehensive testing (optional)
        uv pip install numpy || echo "NumPy installation failed, tests will be skipped"

    - name: Build wheel (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        cd bindings/python
        python scripts/build_wheels.py --optimize ReleaseFast
      env:
        ZIG_OPTIMIZE: ReleaseFast

    - name: Build wheel (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\Activate.ps1
        cd bindings/python
        python scripts/build_wheels.py --optimize ReleaseFast
      env:
        ZIG_OPTIMIZE: ReleaseFast

    - name: Test wheel (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        wheel=$(find bindings/python/dist -name "*.whl" | head -1)
        echo "Installing wheel: $wheel"
        uv pip install "$wheel"
        # Run tests from a temp directory to avoid importing local source code
        mkdir -p /tmp/wheel_test
        cp -r bindings/python/tests /tmp/wheel_test/
        cd /tmp/wheel_test
        pytest tests/ -v

    - name: Test wheel (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\Activate.ps1
        $wheel = Get-ChildItem bindings/python/dist/*.whl | Select-Object -First 1
        Write-Host "Installing wheel: $wheel"
        uv pip install "$wheel"
        # Run tests from a temp directory to avoid importing local source code
        New-Item -ItemType Directory -Force -Path C:\temp\wheel_test
        Copy-Item -Recurse bindings/python/tests C:\temp\wheel_test\
        Set-Location C:\temp\wheel_test
        pytest tests/ -v

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: bindings/python/dist/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Zig
      uses: mlugg/setup-zig@v2
      with:
        version: master

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Create virtual environment
      run: |
        uv venv

    - name: Install build dependencies
      run: |
        uv pip install --upgrade setuptools wheel build pytest
        # Install numpy for more comprehensive testing (optional)
        uv pip install numpy || echo "NumPy installation failed, tests will be skipped"

    - name: Build sdist
      run: |
        source .venv/bin/activate
        cd bindings/python
        python scripts/update_version.py
        python -m build --sdist

    - name: Upload sdist as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: bindings/python/dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # Only upload on releases
    if: github.event_name == 'release'
    environment:
      name: pypi
      url: https://pypi.org/p/zignal-processing

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*"
        merge-multiple: true
        path: dist/

    - name: List downloaded files
      run: ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        attestations: false
        verbose: true

  upload_test_pypi:
    name: Upload to TestPyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # Upload to TestPyPI on PRs for testing
    if: github.event_name == 'pull_request'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/zignal-processing

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*"
        merge-multiple: true
        path: dist/

    - name: List downloaded files
      run: ls -la dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        attestations: false
        verbose: true
